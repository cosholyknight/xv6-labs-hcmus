diff --git a/Makefile b/Makefile
index 74e454f..ebb5693 100644
--- a/Makefile
+++ b/Makefile
@@ -194,6 +194,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_sleep\
+	$U/_pingpong\
 
 
 
diff --git a/user/pingpong.c b/user/pingpong.c
new file mode 100644
index 0000000..b26a267
--- /dev/null
+++ b/user/pingpong.c
@@ -0,0 +1,69 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char* argv[]) {
+    if (argc != 1) {
+        printf("Usage: pingpong\n");
+        exit(-1);
+    }
+
+    // Create pipe
+    int p[2];
+
+    // Check pipe initialization error
+    if (pipe(p) < 0) {
+        printf("pipe initialization failed");
+        exit(-1);
+    }
+
+    char buffer;
+    int pid = fork();
+    // Check fork error
+    if (pid < 0) {
+        printf("fork failed");
+    }
+
+    if (pid == 0) {
+        // Child process
+
+        // Read from pipe
+        if (read(p[0], &buffer, sizeof(buffer)) < 0) {
+            printf("read failed");
+            exit(-1);
+        }
+
+        printf("%d: received ping\n", getpid());
+
+        // Write pipe
+        if (write(p[1], "a", 1) < 0) {
+            printf("write failed");
+            exit(-1);
+        }
+        // close pipe
+        close(p[0]);
+        close(p[1]);
+    }
+    else {
+        // Parent process
+
+        // Write pipe
+        if (write(p[1], "b", 1) < 0) {
+            printf("write failed");
+            exit(-1);
+        }
+        // Wait for the child process to finish
+        wait(0);
+        // Read from pipe
+        if (read(p[0], &buffer, sizeof(buffer)) < 0) {
+            printf("read failed");
+            exit(-1);
+        }
+        printf("%d: received pong\n", getpid());
+        //close pipe
+        close(p[0]);
+        close(p[1]);
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/sleep.c b/user/sleep.c
new file mode 100644
index 0000000..e0b3723
--- /dev/null
+++ b/user/sleep.c
@@ -0,0 +1,14 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char* argv[]) {
+    if (argc != 2) {
+        printf("sleep usage: sleep <ticks>");
+        exit(-1);
+    }
+    int ticks = atoi(argv[1]);
+    sleep(ticks);
+    exit(0);
+}
\ No newline at end of file
